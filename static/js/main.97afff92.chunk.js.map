{"version":3,"sources":["Components/box.js","Action/index.js","Container/box-container.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Box","_this","this","react_default","a","createElement","style","width","height","position","background","concat","props","color","className","margin","top","left","onClick","handleClick","Component","loadColor","dispatch","Axios","get","then","response","changeColor","data","new_color","type","Boxcontainer","console","log","box","state","connect","actionCreators","App","box_container","Boolean","window","location","hostname","match","defaultState","mainReducer","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gWA6BeA,0LA1BJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,SAAU,WACxCC,WAAU,GAAAC,OAAIT,KAAKU,MAAMC,QAE7BC,UAAU,QAEVX,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRO,OAAQ,OACRN,SAAU,WACVO,IAAI,MACJC,KAAK,OAEPH,UAAU,OAEVX,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAIjB,EAAKW,MAAMO,gBAAhC,yBApBQC,+BCDJC,EAAU,WACpB,OAAM,SAACC,GACH,OAAOC,IAAMC,IAAI,yCAChBC,KAAK,SAACC,GACHJ,EAASK,EAAY,IAAID,EAASE,KAAKC,gBAKtCF,EAAY,SAACd,GACtB,MAAO,CACHiB,KAAM,eACNjB,MAAOA,YCTTkB,mLAGE,OADAC,QAAQC,IAAI,YAAa/B,KAAKU,OAE1BT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAKf,YAAajB,KAAKU,MAAMS,UAAWR,MAAOX,KAAKU,MAAMuB,MAAMtB,gBALrDO,aAgBZgB,cANU,SAACD,GACtB,MAAO,CACHA,UAI+BE,EAAxBD,CAAwCL,GCNxCO,mLARX,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,cAJUnB,aCQEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sFClBFC,EAAe,CACfhC,MAAM,OAYKiC,EAVK,WAAgC,IAA/BX,EAA+BY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBF,EAAcK,EAASH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,MAAiB,iBAAdC,EAAOpB,KACNqB,OAAAC,EAAA,EAAAD,CAAA,GACOhB,EADP,CAEItB,MAAOqC,EAAOrC,QAEbsC,OAAAC,EAAA,EAAAD,CAAA,GACFhB,ICCPkB,EAAQC,YAAYR,EAAYS,YAAgBC,MAEpDC,IAASC,OACLvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAUN,MAAOA,GACflD,EAAAC,EAAAC,cAACuD,EAAD,OAEJC,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.97afff92.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Box extends Component {\n  render() {\n    return (\n      <div\n        style={{ width: 500, height: 500, position: \"relative\",\n            background:`${this.props.color}`\n        }}\n        className=\"wrap\"\n      >\n        <div\n          style={{\n            width: \"auto\",\n            height: \"auto\",\n            margin: \"auto\",\n            position: \"absolute\",\n            top:\"50%\",\n            left:\"50%\"\n          }}\n          className=\"box\"\n        >\n          <button onClick={()=>this.props.handleClick()}>Change Color</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Box;\n","import Axios from \"axios\";\n export const loadColor=()=>{\n    return(dispatch)=>{\n        return Axios.get(\"http://www.colr.org/json/color/random\")\n        .then((response)=>{\n            dispatch(changeColor(\"#\"+response.data.new_color))\n        })\n    }\n}\n\nexport const changeColor=(color)=>{\n    return {\n        type: \"CHANGE_COLOR\",\n        color: color\n    }\n}\n","import React, { Component } from 'react';\nimport Box from '../Components/box';\nimport * as actionCreators from \"../Action/index\"\nimport {connect} from \"react-redux\"\nclass Boxcontainer extends Component {\n    render() {\n        console.log(\">>>>>>>>>\", this.props);\n        return (\n            <div>\n                <Box handleClick={this.props.loadColor} color={this.props.state.color}/>\n            </div>\n        );\n    }\n}\nconst  mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nexport default connect(mapStateToProps,actionCreators)(Boxcontainer)\n","import React, { Component } from 'react';\nimport './App.css';\nimport Boxcontainer from './Container/box-container';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Boxcontainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let defaultState = {\n    color:\"red\"\n}\nconst mainReducer = (state = defaultState, action)=>{\n    if(action.type===\"CHANGE_COLOR\"){\n        return{\n            ...state,\n            color: action.color\n        }\n    } return {\n        ...state\n    }\n}\nexport default mainReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore,applyMiddleware} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport mainReducer from \"./reducers/index\"\n\n\nlet store = createStore(mainReducer,applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}